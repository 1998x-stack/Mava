# python3
# Copyright 2021 InstaDeep Ltd. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""MARL system Builder interface."""

import abc
from typing import Dict, Iterator, List, Optional

import reverb
import sonnet as snt
from acme import specs
from acme.utils import counting

from mava import adders, core, types


class SystemBuilder(abc.ABC):
    """An interface for defining the components of an MARL system.
    Implementations of this interface contain a complete specification of a
    MARL system. An instance of this class can be used to build a
    MARL system which interacts with the environment either locally or in a
    distributed setup.

    Args:
        abc ([type]): inherits the abstract base class from abc.
    """

    @abc.abstractmethod
    def make_replay_tables(
        self,
        environment_spec: specs.EnvironmentSpec,
    ) -> List[reverb.Table]:
        """Create data tables to insert data into.

        Args:
            environment_spec (specs.EnvironmentSpec): environment specification
              class that supports functions to obtain information from the environment
              such as number of agents and their actions spaces.

        Returns:
            List[reverb.Table]: a list of data tables for which data can be sent.
        """

    @abc.abstractmethod
    def make_dataset_iterator(
        self,
        replay_client: reverb.Client,
    ) -> Iterator[reverb.ReplaySample]:
        """Create a dataset iterator to use for learning/updating the agent.

        Args:
            replay_client (reverb.Client): client to interface with datasets.

        Yields:
            Iterator[reverb.ReplaySample]: dataset iterator to iterate through
              data samples.
        """

    @abc.abstractmethod
    def make_adder(
        self,
        replay_client: reverb.Client,
    ) -> Optional[adders.ParallelAdder]:
        """Create an adder which records data generated by the executor/environment.

        Args:
            replay_client (reverb.Client): client to interface with datasets.

        Returns:
            Optional[adders.ParallelAdder]: adder to insert data into the dataset.
        """

    @abc.abstractmethod
    def make_executor(
        self,
        policy_networks: Dict[str, snt.Module],
        adder: Optional[adders.ParallelAdder] = None,
        variable_source: Optional[core.VariableSource] = None,
    ) -> core.Executor:
        """Create an executor instance which is a collection of actors.

        Args:
            policy_networks (Dict[str, snt.Module]): a dictionary of policy networks,
              one for each actor.
            adder (Optional[adders.ParallelAdder], optional): adder to call when adding
              data to the dataset. Defaults to None.
            variable_source (Optional[core.VariableSource], optional): variable server
              to interface to sync network variables. Defaults to None.

        Returns:
            core.Executor: system executor which is the acting (data generating)
              part of the system.
        """

    @abc.abstractmethod
    def make_trainer(
        self,
        networks: Dict[str, Dict[str, snt.Module]],
        dataset: Iterator[reverb.ReplaySample],
        replay_client: Optional[reverb.Client] = None,
        counter: Optional[counting.Counter] = None,
        logger: Optional[types.NestedLogger] = None,
    ) -> core.Trainer:
        """Creates an instance of the trainer which is a collection of learners.

        Args:
            networks (Dict[str, Dict[str, snt.Module]]): a dictionary of networks,
              e.g. observation, policy and/or critic networks.
            dataset (Iterator[reverb.ReplaySample]): reverb dataset iterator to query
              for data.
            replay_client (Optional[reverb.Client], optional): client to interface
              with datasets. Defaults to None.
            counter (Optional[counting.Counter], optional): a Counter which allows for
              recording of counts data (e.g. trainer steps). Defaults to None.
            logger (Optional[types.NestedLogger], optional): Logger object for logging
              metadata. Defaults to None.

        Returns:
            core.Trainer: system trainer which updates the parameters of the learners.
        """
